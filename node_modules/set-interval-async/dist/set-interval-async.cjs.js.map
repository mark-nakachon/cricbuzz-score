{"version":3,"file":"set-interval-async.cjs.js","sources":["../src/clear.js","../src/error.js","../src/validation.js","../src/timer.js","../src/dynamic.js","../src/fixed.js","../src/legacy.js","../src/index.js"],"sourcesContent":["/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nlet MAX_INTERVAL_MS = Math.pow(2, 31) - 1\n\n/**\n * Stops an execution cycle started by setIntervalAsync.<br>\n * Any ongoing function executions will run until completion,\n * but all future ones will be cancelled.\n *\n * @param {SetIntervalAsyncTimer} timer\n * @returns {Promise}\n *          A promise which resolves when all pending executions have finished.\n */\nasync function clearIntervalAsync (timer) {\n  timer.stopped = true\n  for (let timeout of Object.values(timer.timeouts)) {\n    clearTimeout(timeout)\n  }\n  let noop = () => {}\n  let promises = Object\n    .values(timer.promises)\n    .map(\n      (promise) => {\n        promise.catch(noop)\n      }\n    )\n  let noopInterval = setInterval(noop, MAX_INTERVAL_MS)\n  await Promise.all(promises)\n  clearInterval(noopInterval)\n}\n\nexport { clearIntervalAsync }\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\n/**\n * Error thrown by setIntervalAsync when invalid arguments are provided.\n */\nclass SetIntervalAsyncError extends Error {\n}\n\nObject.defineProperty(\n  SetIntervalAsyncError.prototype,\n  'name',\n  {\n    value: 'SetIntervalAsyncError'\n  }\n)\n\nexport default SetIntervalAsyncError\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport SetIntervalAsyncError from './error'\n\nlet MIN_INTERVAL_MS = 10\n\n/**\n * @private\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n */\nexport function validateHandler (handler) {\n  if (!(\n    typeof handler === 'function'\n  )) {\n    throw new SetIntervalAsyncError(\n      'Invalid argument: \"handler\". Expected a function.'\n    )\n  }\n}\n\n/**\n * @private\n *\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n */\nexport function validateInterval (interval) {\n  if (!(\n    typeof interval === 'number' && MIN_INTERVAL_MS <= interval\n  )) {\n    throw new SetIntervalAsyncError(\n      `Invalid argument: \"interval\". Expected a number greater than or equal to ${MIN_INTERVAL_MS}.`\n    )\n  }\n}\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\n/**\n * Timer object returned by setIntervalAsync.<br>\n * Can be used together with {@link clearIntervalAsync} to stop execution.\n */\nclass SetIntervalAsyncTimer {\n  constructor () {\n    this.stopped = false\n    this.id = 0\n    this.timeouts = {}\n    this.promises = {}\n  }\n}\n\nexport default SetIntervalAsyncTimer\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport { validateHandler, validateInterval } from './validation'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\n\n/**\n * Attempts to execute the given handler at regular intervals, while preventing<br>\n * multiple concurrent executions. The handler will never be executed concurrently<br>\n * more than once in any given moment. If the running time of any execution exceeds<br>\n * the desired interval, the following execution will be scheduled as soon as<br>\n * possible; ie. immediately after the previous execution concludes.\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n * @param {...*} args - Any number of arguments to pass on to the handler.\n * @returns {SetIntervalAsyncTimer}\n *          A timer object which can be used to stop execution with {@link clearIntervalAsync}.\n *\n * @alias [Dynamic] setIntervalAsync\n */\nfunction setIntervalAsync (handler, interval, ...args) {\n  validateHandler(handler)\n  validateInterval(interval)\n  let timer = new SetIntervalAsyncTimer()\n  let id = timer.id\n  timer.timeouts[id] = setTimeout(\n    timeoutHandler,\n    interval,\n    timer,\n    handler,\n    interval,\n    ...args\n  )\n  return timer\n}\n\nfunction timeoutHandler (timer, handler, interval, ...args) {\n  let id = timer.id\n  timer.promises[id] = (async () => {\n    let startTime = new Date()\n    try {\n      await handler(...args)\n    } catch (err) {\n      console.error(err)\n    }\n    let endTime = new Date()\n    if (!timer.stopped) {\n      let executionTime = endTime - startTime\n      let timeout = interval > executionTime\n        ? interval - executionTime\n        : 0\n      timer.timeouts[id + 1] = setTimeout(\n        timeoutHandler,\n        timeout,\n        timer,\n        handler,\n        interval,\n        ...args\n      )\n    }\n    delete timer.timeouts[id]\n    delete timer.promises[id]\n  })()\n  timer.id = id + 1\n}\n\nexport { setIntervalAsync, clearIntervalAsync, SetIntervalAsyncError }\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport { validateHandler, validateInterval } from './validation'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\n\n/**\n * Executes the given handler at fixed intervals, while preventing<br>\n * multiple concurrent executions. The handler will never be executed<br>\n * concurrently more than once in any given moment, providing a fixed<br>\n * time interval between the <strong>end</strong> of a given execution and the <strong>start</strong> of<br>\n * the following one.\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n * @param {...*} args - Any number of arguments to pass on to the handler.\n * @returns {SetIntervalAsyncTimer}\n *          A timer object which can be used to stop execution with {@link clearIntervalAsync}.\n *\n * @alias [Fixed] setIntervalAsync\n */\nfunction setIntervalAsync (handler, interval, ...args) {\n  validateHandler(handler)\n  validateInterval(interval)\n  let timer = new SetIntervalAsyncTimer()\n  let id = timer.id\n  timer.timeouts[id] = setTimeout(\n    timeoutHandler,\n    interval,\n    timer,\n    handler,\n    interval,\n    ...args\n  )\n  return timer\n}\n\nfunction timeoutHandler (timer, handler, interval, ...args) {\n  let id = timer.id\n  timer.promises[id] = (async () => {\n    try {\n      await handler(...args)\n    } catch (err) {\n      console.error(err)\n    }\n    if (!timer.stopped) {\n      timer.timeouts[id + 1] = setTimeout(\n        timeoutHandler,\n        interval,\n        timer,\n        handler,\n        interval,\n        ...args\n      )\n    }\n    delete timer.timeouts[id]\n    delete timer.promises[id]\n  })()\n  timer.id = id + 1\n}\n\nexport { setIntervalAsync, clearIntervalAsync, SetIntervalAsyncError }\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport { validateHandler, validateInterval } from './validation'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\n\n/**\n * Executes the given handler at fixed intervals; ie. the start time<br>\n * between consecutive executions is always a fixed amount of time.<br>\n * If a given execution takes longer than the given time interval to<br>\n * complete, then the handler will be invoked again without waiting<br>\n * for the previous one to finish. In this scenario, multiple concurrent<br>\n * executions can and will ocurr, so this function should only be used<br>\n * when the given handler is reentrancy-safe.\n *\n * @param {function} handler - Handler function to be executed in intervals.<br>\n *                             May be asynchronous.\n * @param {number} interval - Interval in milliseconds. Must be at least 10 ms.\n * @param {...*} args - Any number of arguments to pass on to the handler.\n * @returns {SetIntervalAsyncTimer}\n *          A timer object which can be used to stop execution with {@link clearIntervalAsync}.\n *\n * @alias [Legacy] setIntervalAsync\n */\nfunction setIntervalAsync (handler, interval, ...args) {\n  validateHandler(handler)\n  validateInterval(interval)\n  let timer = new SetIntervalAsyncTimer()\n  let id = timer.id\n  timer.timeouts[id] = setTimeout(\n    timeoutHandler,\n    interval,\n    timer,\n    handler,\n    interval,\n    ...args\n  )\n  return timer\n}\n\nfunction timeoutHandler (timer, handler, interval, ...args) {\n  let id = timer.id\n  timer.promises[id] = (async () => {\n    if (!timer.stopped) {\n      timer.timeouts[id + 1] = setTimeout(\n        timeoutHandler,\n        interval,\n        timer,\n        handler,\n        interval,\n        ...args\n      )\n    }\n    try {\n      await handler(...args)\n    } catch (err) {\n      console.error(err)\n    }\n    delete timer.timeouts[id]\n    delete timer.promises[id]\n  })()\n  timer.id = id + 1\n}\n\nexport { setIntervalAsync, clearIntervalAsync, SetIntervalAsyncError }\n","/**\n * Copyright (c) 2019 Emilio Almansi. All rights reserved.\n * This work is licensed under the terms of the MIT license.\n * For a copy, see the file LICENSE in the root directory.\n */\n\nimport { clearIntervalAsync } from './clear'\nimport { setIntervalAsync as setIntervalAsyncD } from './dynamic'\nimport { setIntervalAsync as setIntervalAsyncF } from './fixed'\nimport { setIntervalAsync as setIntervalAsyncL } from './legacy'\nimport SetIntervalAsyncError from './error'\nimport SetIntervalAsyncTimer from './timer'\n\nlet dynamic = { setIntervalAsync: setIntervalAsyncD }\nlet fixed = { setIntervalAsync: setIntervalAsyncF }\nlet legacy = { setIntervalAsync: setIntervalAsyncL }\n\nexport {\n  dynamic,\n  fixed,\n  legacy,\n  clearIntervalAsync,\n  SetIntervalAsyncError,\n  SetIntervalAsyncTimer\n}\n"],"names":["MAX_INTERVAL_MS","Math","pow","clearIntervalAsync","timer","stopped","Object","values","timeouts","timeout","clearTimeout","noop","promises","map","promise","catch","noopInterval","setInterval","Promise","all","clearInterval","SetIntervalAsyncError","Error","defineProperty","prototype","value","MIN_INTERVAL_MS","validateHandler","handler","validateInterval","interval","SetIntervalAsyncTimer","constructor","id","setIntervalAsync","args","setTimeout","timeoutHandler","startTime","Date","err","console","error","endTime","executionTime","dynamic","setIntervalAsyncD","fixed","setIntervalAsyncF","legacy","setIntervalAsyncL"],"mappings":"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"}